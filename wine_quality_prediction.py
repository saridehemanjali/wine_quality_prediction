# -*- coding: utf-8 -*-
"""wine_quality_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qpCQLUpRv1nvKPt2JX1o9Aa0vCB8CfVX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

#load the data set
wine_dataset=pd.read_csv('/content/winequality-red.csv')
wine_dataset.shape

wine_dataset.head()

wine_dataset.isnull().sum()

wine_dataset.describe()

#number of values for each quality
sns.catplot(x='quality',data=wine_dataset,kind='count')

#volatile acidity vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='volatile acidity',data=wine_dataset)

#citric acid vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality',y='citric acid',data=wine_dataset)

"""by the above observation we came to know quality directly proportional to citric acid inversly proportional to volatilic acidity"""

#correlation
correlation=wine_dataset.corr()

#construct a heat map to understand the corelation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')
#annotations means fixed acidity,volatile etc....

"""Data preprocessing"""

#seperate the data and label
X=wine_dataset.drop('quality',axis=1)

print(X)

"""label Binarization"""

Y=wine_dataset['quality'].apply(lambda y_value:1 if y_value>=7 else 0)

print(Y)

"""Train &Test Split"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(Y.shape,Y_train.shape,Y_test.shape)

"""Model training:
Random Forest Classifier
"""

model=RandomForestClassifier()

model.fit(X_train,Y_train)

"""Accuracy **score**"""

#accuracy on test data
X_test_pred=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_pred,Y_test)

print('Accuarcy:',test_data_accuracy)

"""Building a predictive system"""

input_data=(7.8,0.58,0.02,2.0,0.073,9.0,18.0,0.9968,3.36,0.57,9.5)
#changing input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the data as we are predicting for only one value
input_data_reshape=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(input_data_reshape)
print(prediction)
if (prediction[0]==1):
  print("Good Quality Wine")
else:
  print("Bad Quality Wine")

